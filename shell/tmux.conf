# : << EOF

# -- general -------------------------------------------------------------------

# Upgrade $TERM
set-option -sa terminal-overrides ",xterm*:Tc"
set-option -g default-shell /bin/zsh
set -as terminal-features ",xterm-256color:RGB"
set -g default-terminal "screen-256color"
if 'infocmp -x tmux-256color > /dev/null 2>&1' 'set -g default-terminal "tmux-256color"'


set -s escape-time 0            # Address vim mode switching delay (http://superuser.com/a/252717/65504)
set -g history-limit 50000      # Increase scrollback buffer size from 2000 to 50000 lines
set -sg repeat-time 600         # Increase tmux command timeout from 500ms to 600ms
set -g display-time 4000        # Increase tmux messages display duration from 750ms to 4s

set -g status-interval 5        # Refresh 'status-left' and 'status-right' more often, from every 15s to 5s

set -g status-keys emacs        # Emacs key bindings in tmux command prompt (prefix + :) are better than vi keys, even for vim users

set -g focus-events on          # Focus events enabled for terminals that support them

setw -g aggressive-resize on    # Super useful when using "grouped sessions" and multi-monitor setup


setw -g xterm-keys on
set -q -g status-utf8 on 
setw -q -g utf8 on

set -g mouse on

# reload configuration
bind R source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# edit configuration
bind E new-window -n "~/.tmux.conf" sh -c '${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display "~/.tmux.conf sourced"'


# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# -- Status line --------------------------------------------------------------
set -g status-left-length 1000      # set status-left length to 1000
set -g status-right-length 1000     # set status-right length to 1000

set -g window-status-separator ""   # remove window status separator

# -- Session ------------------------------------------------------------------

unbind C-b                  # unbind default prefix key


set -g prefix C-a           # replace C-b by C-a instead of using both prefixes
bind C-a send-prefix        # send the prefix key

# create session
bind C-c new-session        # create new session

bind BTab switch-client -l  # move to last session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'




# -- Window -------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
set -g pane-base-index 1     # make pane numbering consistent with windows

set-window-option -g pane-base-index 1
set-option -g renumber-windows on

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# activity
set -g monitor-activity on
set -g visual-activity off

# window navigation
unbind n
unbind p
bind -r C-h previous-window # select previous window
bind -r C-l next-window     # select next window
bind Tab last-window        # move to last active window

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# new window retains current path
bind c new-window -c "#{pane_current_path}"

# split current window horizontally
bind - split-window -v -c "#{pane_current_path}"

# split current window vertically
bind | split-window -h -c "#{pane_current_path}"

# -- Pane ---------------------------------------------------------------------

# toggle sync_panes
bind S run "cut -c3- ~/.tmux.conf | sh -s _toggle_sync_panes"

# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# -- Plugins ------------------------------------------------------------------
set -g @pomodoro_mins 50
set -g @pomodoro_break_mins 10

set -g @catppuccin_flavor "frappe"
set -g @catppuccin_battery_icon "#{battery_icon} "

# Configure the catppuccin plugin
set -g @catppuccin_window_status_style "custom"
set -g @catppuccin_window_number_position "left"
set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_default_text " #W"
set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text " #{pane_current_path}"
set -g @catppuccin_window_status "icon"
set -gq @catppuccin_window_left_separator "█"
set -gq @catppuccin_window_middle_separator "█"
set -gq @catppuccin_window_right_separator "█"

set -g @catppuccin_status_left_separator "█"
set -g @catppuccin_status_right_separator "█"

set -g @catppuccin_date_time_text "%Y-%m-%d %H:%M:%S"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-cowboy'
set -g @plugin 'catppuccin/tmux'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'olimorris/tmux-pomodoro-plus'

run '~/.tmux/plugins/tpm/tpm'

# configure the status line
set -g status-left ""
# set -agF status-left "#{E:@catppuccin_status_pomodoro_plus}"
set -g status-right "#{E:@catppuccin_status_application}"
set -ag status-right "#{E:@catppuccin_status_session}"
# set -agF status-right "#{E:@catppuccin_status_battery}"
# set -ag status-right "#{E:@catppuccin_status_user}"
# set -ag status-right "#{E:@catppuccin_status_host}"
set -ag status-right "#{E:@catppuccin_status_date_time}"

run 'cut -c3- ~/.tmux.conf | sh -s _auto_update_tpm'

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
# (set +H 2>/dev/null) && set +H || true
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
# 
# _auto_update_tpm() {
#   TMUX_PLUGIN_MANAGER_PATH=${TMUX_PLUGIN_MANAGER_PATH:-${HOME}/.tmux/plugins}
#   update_file="${TMUX_PLUGIN_MANAGER_PATH}/last_update"
#   update_log="${TMUX_PLUGIN_MANAGER_PATH}/tpm_log.txt"
#   update_interval=604800
#   now=$(date +%s)
#
#   if [[ ! -f "${update_file}" ]]; then
#     echo "0" > ${update_file}
#   fi
#
#   last_update=$(cat "${update_file}")
#
#   if [[ $((now - last_update)) -gt $update_interval ]]; then
#     echo "\n${now}" >> ${update_log}
#
#     tmux display 'Installing tpm and plugins...'
#     bash $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins >> ${update_log} 2>&1
#     tmux display 'Updating tpm and plugins...'
#     bash $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/update_plugins "all" >> ${update_log} 2>&1
#     tmux display "Cleanup plugins"
#     bash $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/clean_plugins >> ${update_log} 2>&1
#
#     echo "${now}" > ${update_file}
#     tmux display 'Done updating tpm and plugins...'
#
#     tail -n200 ${update_log} > "${update_log}.tmp" && mv "${update_log}.tmp" ${update_log}
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new
# }
#
# _toggle_sync_panes() {
#   # Define variables for the current state and the new state
#   current_state=$(tmux show -wv synchronize-panes)
#   new_state=""
#
#   # Check the current state and set the new state accordingly
#   if [ "$current_state" == "on" ]; then
#     new_state="off"
#   else
#     new_state="on"
#   fi
#
#   # Set the new state
#   tmux setw synchronize-panes $new_state
#   tmux display "synchronize-panes is now $new_state" 
# }
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     current_pane_height=$(tmux display -t "$current_pane" -p "#{pane_height}")
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=1000
#     while [ x"$(tmux list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != x"$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# "$@"
