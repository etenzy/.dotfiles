#!/usr/bin/env bash

source $HOME/.dotfiles/shell/logging.sh
source $HOME/.dotfiles-custom/shell/exports

inputDir=${1:-$(pwd)}
maxdepth=${2:-99}

directories=""
repo=""
mainBranch=""

ANYFAIL=false
function anyfail() {
    log_task_fail
    ANYFAIL=true
}

REPOFAIL=false
function repofail() {
    REPOFAIL=true
}

log_task "Updating git repositories"

directories=$(find $inputDir -depth +$maxdepth -type d \
    -o -path $HOME/.asdf -prune \
    -o -path $HOME/.cache -prune \
    -o -path $HOME/.krew -prune \
    -o -path $HOME/.tmux -prune \
    -o -path $HOME/.vim -prune \
    -o -path $HOME/Backup -prune \
    -o -path $HOME/Desktop -prune \
    -o -path $HOME/Documents -prune \
    -o -path $HOME/Downloads -prune \
    -o -path $HOME/go -prune \
    -o -path $HOME/Library -prune \
    -o -path $HOME/Movies -prune \
    -o -path $HOME/Music -prune \
    -o -path $HOME/Pictures -prune \
    -o -path $HOME/Public -prune \
    -o -name "**.Trash" -prune \
    -o -name ".git" -print)

for directory in $directories; do
    REPOFAIL=false

    if [[ "$directory" =~ .*".git" ]]; then
        repo=$(dirname $directory)
        cd $repo
        
        log_task "Updating $repo"
        echo "Updating $repo" >> $HOME/git.log

        mainBranch=""
        currentBranch=$(git branch --show)
        needToSwitch=false
        needToStash=false

        if [ -z $(git remote | grep "origin") ]; then
            log_warn "Skipping update - No origin remote configured"
            echo "Skipping update - No origin remote configured" >> $HOME/git.log
            echo "" >> $HOME/git.log
            log_task_success
            continue
        fi

        while [ -z "$mainBranch" ]; do
            branchlist=$(git branch --list)

            if [ -n "$(echo "$branchlist" | grep -E '^\*?\s*main$')" ]; then
                mainBranch="main"
            elif [ -n "$(echo "$branchlist" | grep -E '^\*?\s*master$')" ]; then
                mainBranch="master"
            else
                remoteHead=$(git branch -r | grep 'HEAD' | awk -F '->' '{print $2}' | awk -F 'origin/' '{print $2}')
                mainBranch=$(echo "$branchlist" | grep -o "$remoteHead")
            fi
        done

        if [ "$currentBranch" == "$mainBranch" ]; then
            if [ -n "$(git status --porcelain)" ]; then
                git status --short >> $HOME/git.log
                
                log_warn "Skipping update - uncommitted changes"
                echo "Skipping update - uncommitted changes" >> $HOME/git.log
                echo "" >> $HOME/git.log
                log_task_success
                continue
            fi
        else
            needToSwitch=true
            log_info "Need to switch - $currentBranch -> $mainBranch"
            echo "Need to switch - $currentBranch -> $mainBranch" >> $HOME/git.log

            if [ -n "$(git status --porcelain)" ]; then
                needToStash=true
                git status --short >> $HOME/git.log
                
                log_info "Need to stash - uncommitted changes"
                echo "Need to stash - uncommitted changes" >> $HOME/git.log
                
                git stash &>> $HOME/git.log
            fi

            git switch $mainBranch &>> $HOME/git.log
        fi
        
        git fetch origin --verbose &>> $HOME/git.log \
            && log_info "git fetch origin" \
            && git pull --all --verbose &>> $HOME/git.log \
            && log_info "git pull --all" \
            || repofail

        if [ "$needToSwitch" = true ]; then
            log_info "Switching back to $currentBranch"
            echo "Switching back to $currentBranch" >> $HOME/git.log
            git switch $currentBranch &>> $HOME/git.log

            if [ "$needToStash" = true ]; then
                log_info "Poping changes"
                echo "Poping changes" >> $HOME/git.log
                git stash pop &>> $HOME/git.log
            fi
        fi

        if [ "$REPOFAIL" = true ]; then
            anyfail
        else
            log_task_success
        fi
        
        echo "" >> $HOME/git.log
    else
        log_error "$directory is not a git repository"
    fi
done

if [ "$ANYFAIL" = true ]; then
    log_task_fail
    log_warn "Check $HOME/git.log for more information"
    exit 1
else
    log_task_success
    rm -f $HOME/git.log
    exit 0
fi